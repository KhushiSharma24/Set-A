/*  Given an array arr of size n and an integer x. Find if there's a triplet in the array which sums up to the given integer x.

Examples
Input:n = 6, x = 13, arr[] = [1,4,45,6,10,8]
Output: 1
Explanation: The triplet {1, 4, 8} in the array sums up to 13.

Input: n = 5, x = 10, arr[] = [1,2,4,3,6,7]
Output: 1
Explanation: Triplets {1,3,6} & {1,2,7} in the array sum to 10.    */


class Solution {
    // Should return true if there is a triplet with sum equal
    // to x in arr[], otherwise false
    public static boolean find3Numbers(int arr[], int n, int x) {
        int temp=0;
        for(int i=0;i<n-2;i++){
            HashMap<Integer,Integer> hm=new HashMap<>();
            temp=x-arr[i];
            for(int j=i+1;j<n;j++){
                int currSum=temp-arr[j];
                if(hm.containsKey(currSum)){
                    return true;
                }
                else{
                    hm.put(arr[j],j);
                }
            }
            
        }
        return false;

        // Your code Here
    }
}
